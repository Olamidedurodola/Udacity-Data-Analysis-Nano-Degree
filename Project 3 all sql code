WITH recent_customers AS (
  SELECT DISTINCT c.CustomerId, c.FirstName, c.LastName
  FROM Customer c
  JOIN Invoice i
    ON c.CustomerId = i.CustomerId
  WHERE STRFTIME('%Y-%m', i.InvoiceDate) > "2013-06"
  ORDER BY c.CustomerId, c.FirstName, c.LastName
),
potential_customers AS (
  SELECT DISTINCT c.CustomerId, c.FirstName, c.LastName
  FROM Customer c
  JOIN Invoice i
    ON c.CustomerId = i.CustomerId
  WHERE STRFTIME('%Y-%m', i.InvoiceDate) BETWEEN "2012-12" AND "2013-06"
  AND (c.CustomerId, c.FirstName, c.LastName) NOT IN (SELECT * FROM recent_customers)
  ORDER BY c.CustomerId, c.FirstName, c.LastName
),
standard_customers AS (
  SELECT DISTINCT c.CustomerId, c.FirstName, c.LastName
  FROM Customer c
  JOIN Invoice i
    ON c.CustomerId = i.CustomerId
  WHERE STRFTIME('%Y-%m', i.InvoiceDate) BETWEEN "2011-01" AND "2012-12"
  AND (c.CustomerId, c.FirstName, c.LastName) NOT IN (SELECT * FROM recent_customers)
  AND (c.CustomerId, c.FirstName, c.LastName) NOT IN (SELECT * FROM potential_customers)
  ORDER BY c.CustomerId, c.FirstName, c.LastName
),
losing_customers AS (
  SELECT DISTINCT c.CustomerId, c.FirstName, c.LastName
  FROM Customer c
  JOIN Invoice i
    ON c.CustomerId = i.CustomerId
  WHERE STRFTIME('%Y-%m', i.InvoiceDate) < "2011-01"
  AND (c.CustomerId, c.FirstName, c.LastName) NOT IN (SELECT * FROM recent_customers)
  AND (c.CustomerId, c.FirstName, c.LastName) NOT IN (SELECT * FROM potential_customers)
  AND (c.CustomerId, c.FirstName, c.LastName) NOT IN (SELECT * FROM standard_customers)
  ORDER BY c.CustomerId, c.FirstName, c.LastName
)
SELECT * FROM recent_customers
UNION
SELECT * FROM potential_customers
UNION
SELECT * FROM standard_customers
UNION
SELECT * FROM losing_customers;




WITH composer_list AS (
  SELECT
    ar.ArtistId,
    ar.Name AS artist_name,
    t.Composer
  FROM Artist ar
  JOIN Album al
    ON ar.ArtistId = al.ArtistId
  JOIN Track t
    ON al.AlbumId = t.AlbumId
),
composer_employed AS (
  SELECT
    ArtistId,
    artist_name,
    Composer,
    CASE
      WHEN artist_name = Composer
      THEN 'self composer'
      WHEN Composer  LIKE (artist_name || '%')
      THEN 'self composer'
      WHEN Composer  LIKE ('%' || artist_name)
      THEN 'self composer'
      WHEN Composer  LIKE ('&' || artist_name || '%')
      THEN 'self composer'
      WHEN artist_name LIKE (Composer || '%')
      THEN 'self composer'
      WHEN artist_name LIKE ('%' || Composer)
      THEN 'self composer'
      WHEN artist_name LIKE ('&' || Composer || '%')
      THEN 'self composer'
      WHEN Composer IS NULL
      THEN 'no composer'
      ELSE 'outside composer'
    END AS composer_type
  FROM composer_list
  ORDER BY composer_type DESC, artist_name
),
composer_segmentation AS (
  SELECT
    CASE
      WHEN composer_type = 'self composer'
      THEN 1
      ELSE 0
    END AS self_composer,
    CASE
      WHEN composer_type = 'outside composer'
      THEN 1
      ELSE 0
    END AS outside_composer,
    CASE
      WHEN composer_type = 'no composer'
      THEN 1
      ELSE 0
    END AS no_composer
  FROM composer_employed
)
SELECT COUNT(*) AS total_songs,
       SUM(self_composer) AS self_composed,
       SUM(outside_composer) AS outside_composed,
       SUM(no_composer) AS none_composed
FROM composer_segmentation;

/*
Output:
total_songs		self_composed		outside_composed		none_composed
3503					524							2001								978
*/





SELECT g.Name AS genre_type,
       COUNT(*) AS num_purchases
FROM Genre g
JOIN Track t
  ON g.GenreId = t.GenreId
JOIN InvoiceLine il
  ON t.TrackId = il.TrackId
GROUP BY g.Name
ORDER BY num_purchases DESC;

/*
Output:
genre_type             num_purchases
Rock	                 835
Latin	                 386
Metal	                 264
Alternative & Punk	   244
Jazz	                  80
Blues	                  61
TV Shows	              47
Classical	              41
R&B/Soul	              41
Reggae	                30
Drama	                  29
Pop	                    28
Sci Fi & Fantasy	      20
Soundtrack	            20
Hip Hop/Rap	            17
Bossa Nova	            15
Alternative	            14
World	                  13
Electronica/Dance	      12
Heavy Metal	            12
Easy Listening	        10
Comedy	                 9
Rock And Roll	           6
Science Fiction	         6
*/







WITH most_earned_artist AS (
  SELECT
    ar.ArtistId,
    ar.Name AS artist_name,
    SUM(il.UnitPrice * il.Quantity) AS earned
  FROM Artist ar
  JOIN Album al
    ON ar.ArtistId = al.ArtistId
  JOIN Track t
    ON al.AlbumId = t.AlbumId
  JOIN InvoiceLine il
    ON t.TrackId = il.TrackId
  GROUP BY ar.ArtistId,
           ar.Name
  ORDER BY earned DESC
  LIMIT 1
)
SELECT
  ar.ArtistId,
  ar.Name AS artist_name,
  g.Name AS genre_type,
  SUM(il.UnitPrice * il.Quantity) AS earned
FROM Artist ar
JOIN Album al
  ON ar.ArtistId = al.ArtistId
JOIN Track t
  ON al.AlbumId = t.AlbumId
JOIN Genre g
  ON t.GenreId = g.GenreId
JOIN InvoiceLine il
  ON t.TrackId = il.TrackId
JOIN most_earned_artist mea
  ON ar.ArtistId = mea.ArtistId
GROUP BY ar.ArtistId,
         ar.Name,
         g.Name
ORDER BY earned DESC;

/*
Output:
ArtistId		artist_name		genre_type		earned
90					Iron Maiden		Metal					69.3
90					Iron Maiden		Rock					53.46
90					Iron Maiden		Heavy Metal		11.88
90					Iron Maiden		Blues					 3.96
*/






WITH customer_type AS (
  SELECT
    CASE
      WHEN Company IS NULL
      THEN 'domestic'
      ELSE 'business'
    END AS customer_type
  FROM Customer
)

SELECT
  customer_type,
  COUNT(*) AS num_customers
FROM customer_type
GROUP BY customer_type;

/*
Output:
customer_type          num_customers
domestic               49
business               10
*/




WITH purchase_location AS (
  SELECT
    i.InvoiceId,
    i.BillingCountry,
    CASE
      WHEN i.BillingCountry = e.Country
      THEN 'home country'
      ELSE 'over seas'
    END AS sold_in
  FROM Employee e
  JOIN Customer c
    ON e.EmployeeId = c.SupportRepId
  JOIN Invoice i
    ON c.CustomerId = i.CustomerId
),
purchase_location_segmentation AS (
  SELECT
    sold_in,
    COUNT(*) AS num_purchases
  FROM purchase_location
  GROUP BY sold_in
)

SELECT
  pls.sold_in,
  pls.num_purchases
FROM purchase_location_segmentation pls
JOIN (
  SELECT
    SUM(num_purchases) AS total_purchases
  FROM purchase_location_segmentation
) pls2
  ON 1 = 1;

/*
Output:
sold_in            num_purchases
home country       56
over seas          356
*/







SELECT
  e.FirstName || " " || e.LastName AS sales_agent,
  STRFTIME('%Y', i.InvoiceDate) AS year,
  COUNT(*) AS sales
FROM Employee e
JOIN Customer c
  ON e.EmployeeId = c.SupportRepId
JOIN Invoice i
  ON c.CustomerId = i.CustomerId
WHERE e.Title = "Sales Support Agent"
GROUP BY 1, 2
ORDER BY 1, 2;

/*
Output:
sales_agent          year        sales
Jane Peacock         2009        25
Jane Peacock         2010        34
Jane Peacock         2011        28
Jane Peacock         2012        28
Jane Peacock         2013        31
Margaret Park        2009        30
Margaret Park        2010        27
Margaret Park        2011        28
Margaret Park        2012        29
Margaret Park        2013        26
Steve Johnson        2009        28
Steve Johnson        2010        22
Steve Johnson        2011        27
Steve Johnson        2012        26
Steve Johnson        2013        23
*/





8
WITH best_sales_agent
AS (SELECT
  e.FirstName,
  e.LastName,
  COUNT(*) AS assists
FROM Employee e
JOIN Customer c
  ON e.EmployeeId = c.SupportRepId
WHERE e.Title = "Sales Support Agent"
GROUP BY 1, 2
ORDER BY 3 DESC
LIMIT 1)

SELECT
  e.FirstName,
  e.LastName,
  STRFTIME('%Y', i.InvoiceDate) AS year,
  COUNT(*) AS sales
FROM Employee e
JOIN Customer c
  ON e.EmployeeId = c.SupportRepId
JOIN Invoice i
  ON c.CustomerId = i.CustomerId
JOIN best_sales_agent bsa
  ON e.FirstName = bsa.FirstName
  AND e.LastName = bsa.LastName
GROUP BY 1, 2, 3
ORDER BY 3, 1, 2;

/*
Output:
FirstName   LastName   ord_date  Sales
Jane        Peacock    2009      25
Jane        Peacock    2010      34
Jane        Peacock    2011      28
Jane        Peacock    2012      28
